// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "CC0 1.0 Universal",
            "url": "https://creativecommons.org/publicdomain/zero/1.0/"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/account": {
            "get": {
                "description": "Get user account information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get account",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.UserResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update user account information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update account",
                "parameters": [
                    {
                        "description": "User information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UserBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.UserResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/account/password": {
            "put": {
                "description": "Update user password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update password",
                "parameters": [
                    {
                        "description": "Password information",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.PasswordBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.UserResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Login to the application",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "login success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Logout from the application",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "logout success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "description": "user information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "email already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/healthz": {
            "get": {
                "description": "Get the health status of the application",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "misc"
                ],
                "summary": "Healthz",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/webauthn/login/begin": {
            "post": {
                "description": "Start the webauthn login process",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webauthn"
                ],
                "summary": "Begin webauthn login",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/protocol.PublicKeyCredentialRequestOptions"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/webauthn/login/finish": {
            "post": {
                "description": "Finish the webauthn login process",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webauthn"
                ],
                "summary": "Finish webauthn login",
                "parameters": [
                    {
                        "description": "webauthn credential assertion data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/protocol.CredentialAssertionResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "login success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/webauthn/register/begin": {
            "post": {
                "description": "Start the webauthn registration process",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webauthn"
                ],
                "summary": "Begin webauthn registration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/protocol.PublicKeyCredentialCreationOptions"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/webauthn/register/finish": {
            "post": {
                "description": "Finish the webauthn registration process",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webauthn"
                ],
                "summary": "Finish webauthn registration",
                "parameters": [
                    {
                        "description": "webauthn credential creation data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/protocol.CredentialCreationResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "registration success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.LoginCredentials": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "auth.User": {
            "type": "object",
            "required": [
                "country",
                "email",
                "first_name",
                "last_name",
                "password"
            ],
            "properties": {
                "city": {
                    "type": "string",
                    "minLength": 2
                },
                "country": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "minLength": 2
                },
                "password": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 8
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "protocol.AttestationFormat": {
            "type": "string",
            "enum": [
                "packed",
                "tpm",
                "android-key",
                "android-safetynet",
                "fido-u2f",
                "apple",
                "none"
            ],
            "x-enum-varnames": [
                "AttestationFormatPacked",
                "AttestationFormatTPM",
                "AttestationFormatAndroidKey",
                "AttestationFormatAndroidSafetyNet",
                "AttestationFormatFIDOUniversalSecondFactor",
                "AttestationFormatApple",
                "AttestationFormatNone"
            ]
        },
        "protocol.AuthenticationExtensions": {
            "type": "object",
            "additionalProperties": {}
        },
        "protocol.AuthenticationExtensionsClientOutputs": {
            "type": "object",
            "additionalProperties": {}
        },
        "protocol.AuthenticatorAssertionResponse": {
            "type": "object",
            "properties": {
                "authenticatorData": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "clientDataJSON": {
                    "description": "From the spec https://www.w3.org/TR/webauthn/#dom-authenticatorresponse-clientdatajson\nThis attribute contains a JSON serialization of the client data passed to the authenticator\nby the client in its call to either create() or get().",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "signature": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "userHandle": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "protocol.AuthenticatorAttachment": {
            "type": "string",
            "enum": [
                "platform",
                "cross-platform"
            ],
            "x-enum-varnames": [
                "Platform",
                "CrossPlatform"
            ]
        },
        "protocol.AuthenticatorAttestationResponse": {
            "type": "object",
            "properties": {
                "attestationObject": {
                    "description": "AttestationObject is the byte slice version of attestationObject.\nThis attribute contains an attestation object, which is opaque to, and\ncryptographically protected against tampering by, the client. The\nattestation object contains both authenticator data and an attestation\nstatement. The former contains the AAGUID, a unique credential ID, and\nthe credential public key. The contents of the attestation statement are\ndetermined by the attestation statement format used by the authenticator.\nIt also contains any additional information that the Relying Party's server\nrequires to validate the attestation statement, as well as to decode and\nvalidate the authenticator data along with the JSON-serialized client data.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "authenticatorData": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "clientDataJSON": {
                    "description": "From the spec https://www.w3.org/TR/webauthn/#dom-authenticatorresponse-clientdatajson\nThis attribute contains a JSON serialization of the client data passed to the authenticator\nby the client in its call to either create() or get().",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "publicKey": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "publicKeyAlgorithm": {
                    "type": "integer"
                },
                "transports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "protocol.AuthenticatorSelection": {
            "type": "object",
            "properties": {
                "authenticatorAttachment": {
                    "description": "AuthenticatorAttachment If this member is present, eligible authenticators are filtered to only\nauthenticators attached with the specified AuthenticatorAttachment enum.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/protocol.AuthenticatorAttachment"
                        }
                    ]
                },
                "requireResidentKey": {
                    "description": "RequireResidentKey this member describes the Relying Party's requirements regarding resident\ncredentials. If the parameter is set to true, the authenticator MUST create a client-side-resident\npublic key credential source when creating a public key credential.",
                    "type": "boolean"
                },
                "residentKey": {
                    "description": "ResidentKey this member describes the Relying Party's requirements regarding resident\ncredentials per Webauthn Level 2.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/protocol.ResidentKeyRequirement"
                        }
                    ]
                },
                "userVerification": {
                    "description": "UserVerification This member describes the Relying Party's requirements regarding user verification for\nthe create() operation. Eligible authenticators are filtered to only those capable of satisfying this\nrequirement.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/protocol.UserVerificationRequirement"
                        }
                    ]
                }
            }
        },
        "protocol.AuthenticatorTransport": {
            "type": "string",
            "enum": [
                "usb",
                "nfc",
                "ble",
                "smart-card",
                "hybrid",
                "internal"
            ],
            "x-enum-varnames": [
                "USB",
                "NFC",
                "BLE",
                "SmartCard",
                "Hybrid",
                "Internal"
            ]
        },
        "protocol.ConveyancePreference": {
            "type": "string",
            "enum": [
                "none",
                "indirect",
                "direct",
                "enterprise"
            ],
            "x-enum-varnames": [
                "PreferNoAttestation",
                "PreferIndirectAttestation",
                "PreferDirectAttestation",
                "PreferEnterpriseAttestation"
            ]
        },
        "protocol.CredentialAssertionResponse": {
            "type": "object",
            "properties": {
                "authenticatorAttachment": {
                    "type": "string"
                },
                "clientExtensionResults": {
                    "$ref": "#/definitions/protocol.AuthenticationExtensionsClientOutputs"
                },
                "id": {
                    "description": "ID is The credential’s identifier. The requirements for the\nidentifier are distinct for each type of credential. It might\nrepresent a username for username/password tuples, for example.",
                    "type": "string"
                },
                "rawId": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "response": {
                    "$ref": "#/definitions/protocol.AuthenticatorAssertionResponse"
                },
                "type": {
                    "description": "Type is the value of the object’s interface object's [[type]] slot,\nwhich specifies the credential type represented by this object.\nThis should be type \"public-key\" for Webauthn credentials.",
                    "type": "string"
                }
            }
        },
        "protocol.CredentialCreationResponse": {
            "type": "object",
            "properties": {
                "authenticatorAttachment": {
                    "type": "string"
                },
                "clientExtensionResults": {
                    "$ref": "#/definitions/protocol.AuthenticationExtensionsClientOutputs"
                },
                "id": {
                    "description": "ID is The credential’s identifier. The requirements for the\nidentifier are distinct for each type of credential. It might\nrepresent a username for username/password tuples, for example.",
                    "type": "string"
                },
                "rawId": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "response": {
                    "$ref": "#/definitions/protocol.AuthenticatorAttestationResponse"
                },
                "type": {
                    "description": "Type is the value of the object’s interface object's [[type]] slot,\nwhich specifies the credential type represented by this object.\nThis should be type \"public-key\" for Webauthn credentials.",
                    "type": "string"
                }
            }
        },
        "protocol.CredentialDescriptor": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "CredentialID The ID of a credential to allow/disallow.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "transports": {
                    "description": "The authenticator transports that can be used.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.AuthenticatorTransport"
                    }
                },
                "type": {
                    "description": "The valid credential types.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/protocol.CredentialType"
                        }
                    ]
                }
            }
        },
        "protocol.CredentialParameter": {
            "type": "object",
            "properties": {
                "alg": {
                    "$ref": "#/definitions/webauthncose.COSEAlgorithmIdentifier"
                },
                "type": {
                    "$ref": "#/definitions/protocol.CredentialType"
                }
            }
        },
        "protocol.CredentialType": {
            "type": "string",
            "enum": [
                "public-key"
            ],
            "x-enum-varnames": [
                "PublicKeyCredentialType"
            ]
        },
        "protocol.PublicKeyCredentialCreationOptions": {
            "type": "object",
            "properties": {
                "attestation": {
                    "$ref": "#/definitions/protocol.ConveyancePreference"
                },
                "attestationFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.AttestationFormat"
                    }
                },
                "authenticatorSelection": {
                    "$ref": "#/definitions/protocol.AuthenticatorSelection"
                },
                "challenge": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "excludeCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.CredentialDescriptor"
                    }
                },
                "extensions": {
                    "$ref": "#/definitions/protocol.AuthenticationExtensions"
                },
                "hints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.PublicKeyCredentialHints"
                    }
                },
                "pubKeyCredParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.CredentialParameter"
                    }
                },
                "rp": {
                    "$ref": "#/definitions/protocol.RelyingPartyEntity"
                },
                "timeout": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/protocol.UserEntity"
                }
            }
        },
        "protocol.PublicKeyCredentialHints": {
            "type": "string",
            "enum": [
                "security-key",
                "client-device",
                "hybrid"
            ],
            "x-enum-varnames": [
                "PublicKeyCredentialHintSecurityKey",
                "PublicKeyCredentialHintClientDevice",
                "PublicKeyCredentialHintHybrid"
            ]
        },
        "protocol.PublicKeyCredentialRequestOptions": {
            "type": "object",
            "properties": {
                "allowCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.CredentialDescriptor"
                    }
                },
                "challenge": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "extensions": {
                    "$ref": "#/definitions/protocol.AuthenticationExtensions"
                },
                "hints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.PublicKeyCredentialHints"
                    }
                },
                "rpId": {
                    "type": "string"
                },
                "timeout": {
                    "type": "integer"
                },
                "userVerification": {
                    "$ref": "#/definitions/protocol.UserVerificationRequirement"
                }
            }
        },
        "protocol.RelyingPartyEntity": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "A unique identifier for the Relying Party entity, which sets the RP ID.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-palatable name for the entity. Its function depends on what the PublicKeyCredentialEntity represents:\n\nWhen inherited by PublicKeyCredentialRpEntity it is a human-palatable identifier for the Relying Party,\nintended only for display. For example, \"ACME Corporation\", \"Wonderful Widgets, Inc.\" or \"ОАО Примертех\".\n\nWhen inherited by PublicKeyCredentialUserEntity, it is a human-palatable identifier for a user account. It is\nintended only for display, i.e., aiding the user in determining the difference between user accounts with similar\ndisplayNames. For example, \"alexm\", \"alex.p.mueller@example.com\" or \"+14255551234\".",
                    "type": "string"
                }
            }
        },
        "protocol.ResidentKeyRequirement": {
            "type": "string",
            "enum": [
                "discouraged",
                "preferred",
                "required"
            ],
            "x-enum-varnames": [
                "ResidentKeyRequirementDiscouraged",
                "ResidentKeyRequirementPreferred",
                "ResidentKeyRequirementRequired"
            ]
        },
        "protocol.UserEntity": {
            "type": "object",
            "properties": {
                "displayName": {
                    "description": "A human-palatable name for the user account, intended only for display.\nFor example, \"Alex P. Müller\" or \"田中 倫\". The Relying Party SHOULD let\nthe user choose this, and SHOULD NOT restrict the choice more than necessary.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the user handle of the user account entity. To ensure secure operation,\nauthentication and authorization decisions MUST be made on the basis of this id\nmember, not the displayName nor name members. See Section 6.1 of\n[RFC8266](https://www.w3.org/TR/webauthn/#biblio-rfc8266)."
                },
                "name": {
                    "description": "A human-palatable name for the entity. Its function depends on what the PublicKeyCredentialEntity represents:\n\nWhen inherited by PublicKeyCredentialRpEntity it is a human-palatable identifier for the Relying Party,\nintended only for display. For example, \"ACME Corporation\", \"Wonderful Widgets, Inc.\" or \"ОАО Примертех\".\n\nWhen inherited by PublicKeyCredentialUserEntity, it is a human-palatable identifier for a user account. It is\nintended only for display, i.e., aiding the user in determining the difference between user accounts with similar\ndisplayNames. For example, \"alexm\", \"alex.p.mueller@example.com\" or \"+14255551234\".",
                    "type": "string"
                }
            }
        },
        "protocol.UserVerificationRequirement": {
            "type": "string",
            "enum": [
                "required",
                "preferred",
                "discouraged"
            ],
            "x-enum-comments": {
                "VerificationPreferred": "This is the default"
            },
            "x-enum-varnames": [
                "VerificationRequired",
                "VerificationPreferred",
                "VerificationDiscouraged"
            ]
        },
        "user.PasswordBody": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 8
                },
                "old_password": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 8
                }
            }
        },
        "user.UserBody": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "minLength": 2
                },
                "country": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "minLength": 2
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "user.UserResponse": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "webauthncose.COSEAlgorithmIdentifier": {
            "type": "integer",
            "enum": [
                -7,
                -8,
                -35,
                -36,
                -37,
                -38,
                -39,
                -47,
                -257,
                -258,
                -259,
                -65535
            ],
            "x-enum-varnames": [
                "AlgES256",
                "AlgEdDSA",
                "AlgES384",
                "AlgES512",
                "AlgPS256",
                "AlgPS384",
                "AlgPS512",
                "AlgES256K",
                "AlgRS256",
                "AlgRS384",
                "AlgRS512",
                "AlgRS1"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "MSN Server API",
	Description:      "This is the API for the MSN server web application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
