basePath: /api
definitions:
  auth.LoginCredentials:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  auth.User:
    properties:
      city:
        minLength: 2
        type: string
      country:
        type: string
      email:
        type: string
      first_name:
        minLength: 2
        type: string
      last_name:
        minLength: 2
        type: string
      password:
        maxLength: 16
        minLength: 8
        type: string
      state:
        type: string
    required:
    - country
    - email
    - first_name
    - last_name
    - password
    type: object
  protocol.AttestationFormat:
    enum:
    - packed
    - tpm
    - android-key
    - android-safetynet
    - fido-u2f
    - apple
    - none
    type: string
    x-enum-varnames:
    - AttestationFormatPacked
    - AttestationFormatTPM
    - AttestationFormatAndroidKey
    - AttestationFormatAndroidSafetyNet
    - AttestationFormatFIDOUniversalSecondFactor
    - AttestationFormatApple
    - AttestationFormatNone
  protocol.AuthenticationExtensions:
    additionalProperties: {}
    type: object
  protocol.AuthenticationExtensionsClientOutputs:
    additionalProperties: {}
    type: object
  protocol.AuthenticatorAssertionResponse:
    properties:
      authenticatorData:
        items:
          type: integer
        type: array
      clientDataJSON:
        description: |-
          From the spec https://www.w3.org/TR/webauthn/#dom-authenticatorresponse-clientdatajson
          This attribute contains a JSON serialization of the client data passed to the authenticator
          by the client in its call to either create() or get().
        items:
          type: integer
        type: array
      signature:
        items:
          type: integer
        type: array
      userHandle:
        items:
          type: integer
        type: array
    type: object
  protocol.AuthenticatorAttachment:
    enum:
    - platform
    - cross-platform
    type: string
    x-enum-varnames:
    - Platform
    - CrossPlatform
  protocol.AuthenticatorAttestationResponse:
    properties:
      attestationObject:
        description: |-
          AttestationObject is the byte slice version of attestationObject.
          This attribute contains an attestation object, which is opaque to, and
          cryptographically protected against tampering by, the client. The
          attestation object contains both authenticator data and an attestation
          statement. The former contains the AAGUID, a unique credential ID, and
          the credential public key. The contents of the attestation statement are
          determined by the attestation statement format used by the authenticator.
          It also contains any additional information that the Relying Party's server
          requires to validate the attestation statement, as well as to decode and
          validate the authenticator data along with the JSON-serialized client data.
        items:
          type: integer
        type: array
      authenticatorData:
        items:
          type: integer
        type: array
      clientDataJSON:
        description: |-
          From the spec https://www.w3.org/TR/webauthn/#dom-authenticatorresponse-clientdatajson
          This attribute contains a JSON serialization of the client data passed to the authenticator
          by the client in its call to either create() or get().
        items:
          type: integer
        type: array
      publicKey:
        items:
          type: integer
        type: array
      publicKeyAlgorithm:
        type: integer
      transports:
        items:
          type: string
        type: array
    type: object
  protocol.AuthenticatorSelection:
    properties:
      authenticatorAttachment:
        allOf:
        - $ref: '#/definitions/protocol.AuthenticatorAttachment'
        description: |-
          AuthenticatorAttachment If this member is present, eligible authenticators are filtered to only
          authenticators attached with the specified AuthenticatorAttachment enum.
      requireResidentKey:
        description: |-
          RequireResidentKey this member describes the Relying Party's requirements regarding resident
          credentials. If the parameter is set to true, the authenticator MUST create a client-side-resident
          public key credential source when creating a public key credential.
        type: boolean
      residentKey:
        allOf:
        - $ref: '#/definitions/protocol.ResidentKeyRequirement'
        description: |-
          ResidentKey this member describes the Relying Party's requirements regarding resident
          credentials per Webauthn Level 2.
      userVerification:
        allOf:
        - $ref: '#/definitions/protocol.UserVerificationRequirement'
        description: |-
          UserVerification This member describes the Relying Party's requirements regarding user verification for
          the create() operation. Eligible authenticators are filtered to only those capable of satisfying this
          requirement.
    type: object
  protocol.AuthenticatorTransport:
    enum:
    - usb
    - nfc
    - ble
    - smart-card
    - hybrid
    - internal
    type: string
    x-enum-varnames:
    - USB
    - NFC
    - BLE
    - SmartCard
    - Hybrid
    - Internal
  protocol.ConveyancePreference:
    enum:
    - none
    - indirect
    - direct
    - enterprise
    type: string
    x-enum-varnames:
    - PreferNoAttestation
    - PreferIndirectAttestation
    - PreferDirectAttestation
    - PreferEnterpriseAttestation
  protocol.CredentialAssertionResponse:
    properties:
      authenticatorAttachment:
        type: string
      clientExtensionResults:
        $ref: '#/definitions/protocol.AuthenticationExtensionsClientOutputs'
      id:
        description: |-
          ID is The credential’s identifier. The requirements for the
          identifier are distinct for each type of credential. It might
          represent a username for username/password tuples, for example.
        type: string
      rawId:
        items:
          type: integer
        type: array
      response:
        $ref: '#/definitions/protocol.AuthenticatorAssertionResponse'
      type:
        description: |-
          Type is the value of the object’s interface object's [[type]] slot,
          which specifies the credential type represented by this object.
          This should be type "public-key" for Webauthn credentials.
        type: string
    type: object
  protocol.CredentialCreationResponse:
    properties:
      authenticatorAttachment:
        type: string
      clientExtensionResults:
        $ref: '#/definitions/protocol.AuthenticationExtensionsClientOutputs'
      id:
        description: |-
          ID is The credential’s identifier. The requirements for the
          identifier are distinct for each type of credential. It might
          represent a username for username/password tuples, for example.
        type: string
      rawId:
        items:
          type: integer
        type: array
      response:
        $ref: '#/definitions/protocol.AuthenticatorAttestationResponse'
      type:
        description: |-
          Type is the value of the object’s interface object's [[type]] slot,
          which specifies the credential type represented by this object.
          This should be type "public-key" for Webauthn credentials.
        type: string
    type: object
  protocol.CredentialDescriptor:
    properties:
      id:
        description: CredentialID The ID of a credential to allow/disallow.
        items:
          type: integer
        type: array
      transports:
        description: The authenticator transports that can be used.
        items:
          $ref: '#/definitions/protocol.AuthenticatorTransport'
        type: array
      type:
        allOf:
        - $ref: '#/definitions/protocol.CredentialType'
        description: The valid credential types.
    type: object
  protocol.CredentialParameter:
    properties:
      alg:
        $ref: '#/definitions/webauthncose.COSEAlgorithmIdentifier'
      type:
        $ref: '#/definitions/protocol.CredentialType'
    type: object
  protocol.CredentialType:
    enum:
    - public-key
    type: string
    x-enum-varnames:
    - PublicKeyCredentialType
  protocol.PublicKeyCredentialCreationOptions:
    properties:
      attestation:
        $ref: '#/definitions/protocol.ConveyancePreference'
      attestationFormats:
        items:
          $ref: '#/definitions/protocol.AttestationFormat'
        type: array
      authenticatorSelection:
        $ref: '#/definitions/protocol.AuthenticatorSelection'
      challenge:
        items:
          type: integer
        type: array
      excludeCredentials:
        items:
          $ref: '#/definitions/protocol.CredentialDescriptor'
        type: array
      extensions:
        $ref: '#/definitions/protocol.AuthenticationExtensions'
      hints:
        items:
          $ref: '#/definitions/protocol.PublicKeyCredentialHints'
        type: array
      pubKeyCredParams:
        items:
          $ref: '#/definitions/protocol.CredentialParameter'
        type: array
      rp:
        $ref: '#/definitions/protocol.RelyingPartyEntity'
      timeout:
        type: integer
      user:
        $ref: '#/definitions/protocol.UserEntity'
    type: object
  protocol.PublicKeyCredentialHints:
    enum:
    - security-key
    - client-device
    - hybrid
    type: string
    x-enum-varnames:
    - PublicKeyCredentialHintSecurityKey
    - PublicKeyCredentialHintClientDevice
    - PublicKeyCredentialHintHybrid
  protocol.PublicKeyCredentialRequestOptions:
    properties:
      allowCredentials:
        items:
          $ref: '#/definitions/protocol.CredentialDescriptor'
        type: array
      challenge:
        items:
          type: integer
        type: array
      extensions:
        $ref: '#/definitions/protocol.AuthenticationExtensions'
      hints:
        items:
          $ref: '#/definitions/protocol.PublicKeyCredentialHints'
        type: array
      rpId:
        type: string
      timeout:
        type: integer
      userVerification:
        $ref: '#/definitions/protocol.UserVerificationRequirement'
    type: object
  protocol.RelyingPartyEntity:
    properties:
      id:
        description: A unique identifier for the Relying Party entity, which sets
          the RP ID.
        type: string
      name:
        description: |-
          A human-palatable name for the entity. Its function depends on what the PublicKeyCredentialEntity represents:

          When inherited by PublicKeyCredentialRpEntity it is a human-palatable identifier for the Relying Party,
          intended only for display. For example, "ACME Corporation", "Wonderful Widgets, Inc." or "ОАО Примертех".

          When inherited by PublicKeyCredentialUserEntity, it is a human-palatable identifier for a user account. It is
          intended only for display, i.e., aiding the user in determining the difference between user accounts with similar
          displayNames. For example, "alexm", "alex.p.mueller@example.com" or "+14255551234".
        type: string
    type: object
  protocol.ResidentKeyRequirement:
    enum:
    - discouraged
    - preferred
    - required
    type: string
    x-enum-varnames:
    - ResidentKeyRequirementDiscouraged
    - ResidentKeyRequirementPreferred
    - ResidentKeyRequirementRequired
  protocol.UserEntity:
    properties:
      displayName:
        description: |-
          A human-palatable name for the user account, intended only for display.
          For example, "Alex P. Müller" or "田中 倫". The Relying Party SHOULD let
          the user choose this, and SHOULD NOT restrict the choice more than necessary.
        type: string
      id:
        description: |-
          ID is the user handle of the user account entity. To ensure secure operation,
          authentication and authorization decisions MUST be made on the basis of this id
          member, not the displayName nor name members. See Section 6.1 of
          [RFC8266](https://www.w3.org/TR/webauthn/#biblio-rfc8266).
      name:
        description: |-
          A human-palatable name for the entity. Its function depends on what the PublicKeyCredentialEntity represents:

          When inherited by PublicKeyCredentialRpEntity it is a human-palatable identifier for the Relying Party,
          intended only for display. For example, "ACME Corporation", "Wonderful Widgets, Inc." or "ОАО Примертех".

          When inherited by PublicKeyCredentialUserEntity, it is a human-palatable identifier for a user account. It is
          intended only for display, i.e., aiding the user in determining the difference between user accounts with similar
          displayNames. For example, "alexm", "alex.p.mueller@example.com" or "+14255551234".
        type: string
    type: object
  protocol.UserVerificationRequirement:
    enum:
    - required
    - preferred
    - discouraged
    type: string
    x-enum-comments:
      VerificationPreferred: This is the default
    x-enum-varnames:
    - VerificationRequired
    - VerificationPreferred
    - VerificationDiscouraged
  user.PasswordBody:
    properties:
      new_password:
        maxLength: 16
        minLength: 8
        type: string
      old_password:
        maxLength: 16
        minLength: 8
        type: string
    required:
    - new_password
    - old_password
    type: object
  user.UserBody:
    properties:
      city:
        minLength: 2
        type: string
      country:
        type: string
      first_name:
        minLength: 2
        type: string
      last_name:
        minLength: 2
        type: string
      state:
        type: string
    type: object
  user.UserResponse:
    properties:
      city:
        type: string
      country:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      state:
        type: string
    type: object
  webauthncose.COSEAlgorithmIdentifier:
    enum:
    - -7
    - -8
    - -35
    - -36
    - -37
    - -38
    - -39
    - -47
    - -257
    - -258
    - -259
    - -65535
    type: integer
    x-enum-varnames:
    - AlgES256
    - AlgEdDSA
    - AlgES384
    - AlgES512
    - AlgPS256
    - AlgPS384
    - AlgPS512
    - AlgES256K
    - AlgRS256
    - AlgRS384
    - AlgRS512
    - AlgRS1
info:
  contact: {}
  description: This is the API for the MSN server web application.
  license:
    name: CC0 1.0 Universal
    url: https://creativecommons.org/publicdomain/zero/1.0/
  title: MSN Server API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login to the application
      parameters:
      - description: login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginCredentials'
      produces:
      - text/plain
      responses:
        "200":
          description: login success
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "401":
          description: unauthorized
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout from the application
      produces:
      - text/plain
      responses:
        "200":
          description: logout success
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Logout
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.User'
      produces:
      - text/plain
      responses:
        "200":
          description: user created
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "409":
          description: email already exists
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Register
      tags:
      - auth
  /auth/webauthn/login/begin:
    post:
      consumes:
      - application/json
      description: Start the webauthn login process
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/protocol.PublicKeyCredentialRequestOptions'
        "500":
          description: internal server error
          schema:
            type: string
      summary: Begin webauthn login
      tags:
      - webauthn
  /auth/webauthn/login/finish:
    post:
      consumes:
      - application/json
      description: Finish the webauthn login process
      parameters:
      - description: webauthn credential assertion data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/protocol.CredentialAssertionResponse'
      produces:
      - application/json
      responses:
        "200":
          description: login success
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Finish webauthn login
      tags:
      - webauthn
  /auth/webauthn/register/begin:
    post:
      consumes:
      - application/json
      description: Start the webauthn registration process
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/protocol.PublicKeyCredentialCreationOptions'
        "500":
          description: internal server error
          schema:
            type: string
      summary: Begin webauthn registration
      tags:
      - webauthn
  /auth/webauthn/register/finish:
    post:
      consumes:
      - application/json
      description: Finish the webauthn registration process
      parameters:
      - description: webauthn credential creation data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/protocol.CredentialCreationResponse'
      produces:
      - application/json
      responses:
        "200":
          description: registration success
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Finish webauthn registration
      tags:
      - webauthn
  /healthz:
    get:
      description: Get the health status of the application
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Healthz
      tags:
      - misc
  /user/account:
    get:
      description: Get user account information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserResponse'
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get account
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Update user account information
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UserBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserResponse'
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Update account
      tags:
      - user
  /user/account/password:
    put:
      consumes:
      - application/json
      description: Update user password
      parameters:
      - description: Password information
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/user.PasswordBody'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserResponse'
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Update password
      tags:
      - user
swagger: "2.0"
